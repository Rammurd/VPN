import logging ##–ù–£–ñ–ù–û –°–î–ï–õ–ê–¢–¨ –£–î–ê–õ–ï–ù–ò–ï –ö–õ–Æ–ß–ï–ô, —Ç—É—Ç –ø—Ä–∏–º–µ—Ä—ã https://github.com/jadolg/outline-vpn-api
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.types import ParseMode
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
import httpx
from database import add_user, update_purchase_date, get_access_key, add_access_key, get_key_text, get_server_locations


# –°—é–¥–∞ —Ç—ã–∫–∞—é —Ç–æ–∫–µ–Ω –æ—Ç –±–æ—Ç–∞
bot = Bot(token='5964693615:AAFLleTU9TTsMlwa2ApbKXLiJvm1MLUO5fg')
dp = Dispatcher(bot)
logging.basicConfig(level=logging.INFO)
dp.middleware.setup(LoggingMiddleware())

@dp.message_handler(commands=['start'])
async def start_command(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = ["üîç –ö–∞–∫ –ø–æ–¥–∫–ª—é—á–∏—Ç—å","üçå –î–æ—Å—Ç—É–ø –∫ VPN", "üõ† –ú–æ–∏ –∫–ª—é—á–∏"]
    keyboard.add(*buttons)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:", reply_markup=keyboard)

    #–î–æ–±–∞–≤–ª—è—é —é–∑–µ—Ä–∞ –≤ –±–¥ –ø–æ—Å–ª–µ –∫–Ω–æ–ø–∫–∏ START
    user_id = message.from_user.id
    username = message.from_user.username
    add_user(user_id, username)


@dp.message_handler(lambda message: message.text == 'üõ† –ú–æ–∏ –∫–ª—é—á–∏')
async def my_keys_command(message: types.Message):
    # –ü–æ–ª—É—á–∏—Ç–µ user_id –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    user_id = message.from_user.id

    # –ü–æ–ª—É—á–∏—Ç–µ –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–µ—Ä–Ω—ã–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ user_id
    server_locations = get_server_locations(user_id)

    if server_locations:
        # –°–æ–∑–¥–∞–π—Ç–µ –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ server_locations
        keyboard = InlineKeyboardMarkup()
        buttons = [InlineKeyboardButton(location, callback_data=f'server_location_{location}') for location in server_locations]
        keyboard.add(*buttons)

        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä–Ω–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ:", reply_markup=keyboard)
    else:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–µ—Ä–≤–µ—Ä–Ω—ã—Ö –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–π.")

@dp.callback_query_handler(lambda query: query.data.startswith('server_location_'))
async def handle_server_location_choice(callback_query: types.CallbackQuery):
    # –ü–æ–ª—É—á–∏—Ç–µ server_location, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–π –Ω–∞–∂–∞–ª–∏, –∏–∑ callback_data
    server_location = callback_query.data.replace('server_location_', '')

    # –ü–æ–ª—É—á–∏—Ç–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π key_text –¥–ª—è server_location
    user_id = callback_query.from_user.id
    key_text = get_key_text(user_id, server_location)

    if key_text:
        await callback_query.answer()
        await bot.send_message(callback_query.from_user.id, f"–ö–ª—é—á –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞ {server_location}: {key_text}")
    else:
        await callback_query.answer("–ö–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω.")



# –ö–Ω–æ–ø–∫–∞ "üîç –ö–∞–∫ –ø–æ–¥–∫–ª—é—á–∏—Ç—å"
@dp.message_handler(lambda message: message.text == 'üîç –ö–∞–∫ –ø–æ–¥–∫–ª—é—á–∏—Ç—å')
async def how_to_connect(message: types.Message):
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        types.InlineKeyboardButton("üíÖ iOS (iPhone)", url="https://itunes.apple.com/us/app/outline-app/id1356177741"),
        types.InlineKeyboardButton("üëî MacOS (–¢—É–Ω–µ—è–¥—Ü—ã)", url="https://itunes.apple.com/us/app/outline-app/id1356178125"),
        types.InlineKeyboardButton("üêß Linux (–î–ª—è –ø—Å–∏—Ö–æ–≤)", url="https://raw.githubusercontent.com/Jigsaw-Code/outline-releases/master/client/stable/Outline-Client.AppImage"),
        types.InlineKeyboardButton("ü§ñ Android (–ù–µ iPhone)", url="https://play.google.com/store/apps/details?id=org.outline.android.client"),
        types.InlineKeyboardButton("üö™ Windows (–ö–æ–º–ø—å—é—Ç–µ—Ä)", url="https://raw.githubusercontent.com/Jigsaw-Code/outline-releases/master/client/stable/Outline-Client.exe"),
        types.InlineKeyboardButton("ü•© Chrome (–ë—Ä–∞—É–∑–µ—Ä)", url="https://play.google.com/store/apps/details?id=org.outline.android.client")
    )
    await message.answer("üçô –° –∫–∞–∫–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –±—É–¥–µ–º –ø–æ–¥–∫–ª—é—á–∞—Ç—å—Å—è?", reply_markup=keyboard)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "üçå –î–æ—Å—Ç—É–ø –∫ VPN" –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω–≤–æ–π—Å–∞
@dp.message_handler(lambda message: message.text == 'üçå –î–æ—Å—Ç—É–ø –∫ VPN')
async def server_callback(message: types.Message):
    # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ç—Ä–µ–º—è –∫–Ω–æ–ø–∫–∞–º–∏ —Ç–∞—Ä–∏—Ñ–æ–≤ –≤ —Å—Ç–æ–ª–±—Ü–µ
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    buttons = [
        types.InlineKeyboardButton("1 –º–µ—Å—è—Ü (249 —Ä—É–±–ª–µ–π)", callback_data="vpn_1_month"),
        types.InlineKeyboardButton("3 –º–µ—Å—è—Ü–∞ (660 —Ä—É–±–ª–µ–π)", callback_data="vpn_3_months"),
        types.InlineKeyboardButton("6 –º–µ—Å—è—Ü–µ–≤ (990 —Ä—É–±–ª–µ–π)", callback_data="vpn_6_months")
    ]
    keyboard.add(*buttons)

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∞—Ä–∏—Ñ –¥–æ—Å—Ç—É–ø–∞ –∫ VPN:", reply_markup=keyboard)

@dp.callback_query_handler(lambda query: query.data.startswith('vpn_'))
async def handle_vpn_tariff(callback_query: types.CallbackQuery):
    # –ü–æ–ª—É—á–∏—Ç–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–π —Ç–∞—Ä–∏—Ñ –∏–∑ callback_data
    tariff = callback_query.data

    # –û–ø—Ä–µ–¥–µ–ª–∏—Ç–µ —Ü–µ–Ω—É –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ç–∞—Ä–∏—Ñ–∞
    if tariff == 'vpn_1_month':
        price = 24900
        description = "–î–æ—Å—Ç—É–ø –∫ VPN –Ω–∞ 1 –º–µ—Å—è—Ü"
    elif tariff == 'vpn_3_months':
        price = 66000
        description = "–î–æ—Å—Ç—É–ø –∫ VPN –Ω–∞ 3 –º–µ—Å—è—Ü–∞"
    elif tariff == 'vpn_6_months':
        price = 99000
        description = "–î–æ—Å—Ç—É–ø –∫ VPN –Ω–∞ 6 –º–µ—Å—è—Ü–µ–≤"
    else:
        price = 0
        description = ""

    # –°–æ–∑–¥–∞–π—Ç–µ –∏–Ω–≤–æ–π—Å —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º —Ç–∞—Ä–∏—Ñ–æ–º
    invoice = types.Invoice(
        title="–î–æ—Å—Ç—É–ø –∫ VPN",
        description=description,
        payload=tariff,
        provider_token="381764678:TEST:73561",
        currency="RUB",
        prices=[types.LabeledPrice(label="–†—É–±", amount=price)]
    )

    # –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–Ω–≤–æ–π—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await bot.send_invoice(callback_query.from_user.id, **invoice.to_python())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ PreCheckoutQuery
@dp.pre_checkout_query_handler(lambda query: True)
async def process_pre_checkout_query(pre_checkout_query: types.PreCheckoutQuery):
    await bot.answer_pre_checkout_query(
        pre_checkout_query.id,
        ok=True,
        error_message="–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–ª–∞—Ç–µ–∂ –Ω–µ –ø—Ä–æ—à–µ–ª"
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
@dp.message_handler(content_types=types.ContentType.SUCCESSFUL_PAYMENT)
async def process_successful_payment(message: types.Message):
    # –ü–æ–ª—É—á–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏–∑ SuccessfulPayment
    transaction_id = message.successful_payment.provider_payment_charge_id

    # –ó–∞–ø—Ä–æ—Å –∫ —Å–µ—Ä–≤–µ—Ä—É Outline –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª—é—á–∞
    outline_server_data = {
        "apiUrl": "https://81.19.137.215:55902/Gs9mTulEVDPZmGcrj8dv6w",
        "certSha256": "A786F229BE1C5D083C559D7658DD18BFAA2D00D8946C2251FA1C3BB161027AF8"
    }
    async with httpx.AsyncClient(verify=False) as client:
        url = outline_server_data["apiUrl"] + "/access-keys/"
        response = await client.post(url)

        if response.status_code == 201:
            key_data = response.json()
            print(key_data)
            key_text = key_data.get("accessUrl")

            user_id = message.from_user.id
            update_purchase_date(user_id)
            add_access_key(user_id, key_text, "FRANCE")

    #–í—Ç–æ—Ä–æ–π —Å–µ—Ä–≤–µ—Ä
    outline_server_data_1 = {
        "apiUrl":"https://95.181.173.47:53852/m7q9MYv9BxRe6Sdj5fDZgw",
        "certSha256":"8FCD1D531CD1A0AE6D30A1627FE94968D3370EFF5F435018651C47ADABAB0834"
    }
    async with httpx.AsyncClient(verify=False) as client:
        url = outline_server_data_1["apiUrl"] + "/access-keys/"
        response = await client.post(url)

        if response.status_code == 201:
            key_data = response.json()
            print(key_data)
            key_text = key_data.get("accessUrl")

            add_access_key(user_id, key_text, "USA")

        else:
            await bot.send_message(
                message.from_user.id,
                "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–ª–∞—Ç–µ–∂ –ø—Ä–æ—à–µ–ª, –Ω–æ –∫–ª—é—á –Ω–µ –±—ã–ª –ø–æ–ª—É—á–µ–Ω."
            )

if __name__ == '__main__':
    from aiogram import executor
    executor.start_polling(dp, skip_updates=None)