import logging
from aiogram import Bot, Dispatcher, types
from aiogram.contrib.middlewares.logging import LoggingMiddleware
from aiogram.types import ParseMode
import httpx
from database import add_user, update_purchase_date, get_user_data


# –°—é–¥–∞ —Ç—ã–∫–∞—é —Ç–æ–∫–µ–Ω –æ—Ç –±–æ—Ç–∞
bot = Bot(token='5964693615:AAFLleTU9TTsMlwa2ApbKXLiJvm1MLUO5fg')
dp = Dispatcher(bot)
logging.basicConfig(level=logging.INFO)
dp.middleware.setup(LoggingMiddleware())

@dp.message_handler(commands=['start'])
async def start_command(message: types.Message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = ["üîç –ö–∞–∫ –ø–æ–¥–∫–ª—é—á–∏—Ç—å","üçå –î–æ—Å—Ç—É–ø –∫ VPN"]
    keyboard.add(*buttons)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –∏–∑ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:", reply_markup=keyboard)

    #–î–æ–±–∞–≤–ª—è—é —é–∑–µ—Ä–∞ –≤ –±–¥ –ø–æ—Å–ª–µ –∫–Ω–æ–ø–∫–∏ START
    user_id = message.from_user.id
    username = message.from_user.username
    add_user(user_id, username)


# –ö–Ω–æ–ø–∫–∞ "üîç –ö–∞–∫ –ø–æ–¥–∫–ª—é—á–∏—Ç—å"
@dp.message_handler(lambda message: message.text == 'üîç –ö–∞–∫ –ø–æ–¥–∫–ª—é—á–∏—Ç—å')
async def how_to_connect(message: types.Message):
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    keyboard.add(
        types.InlineKeyboardButton("üíÖ iOS (iPhone)", url="https://itunes.apple.com/us/app/outline-app/id1356177741"),
        types.InlineKeyboardButton("üëî MacOS (–¢—É–Ω–µ—è–¥—Ü—ã)", url="https://itunes.apple.com/us/app/outline-app/id1356178125"),
        types.InlineKeyboardButton("üêß Linux (–î–ª—è –ø—Å–∏—Ö–æ–≤)", url="https://raw.githubusercontent.com/Jigsaw-Code/outline-releases/master/client/stable/Outline-Client.AppImage"),
        types.InlineKeyboardButton("ü§ñ Android (–ù–µ iPhone)", url="https://play.google.com/store/apps/details?id=org.outline.android.client"),
        types.InlineKeyboardButton("üö™ Windows (–ö–æ–º–ø—å—é—Ç–µ—Ä)", url="https://raw.githubusercontent.com/Jigsaw-Code/outline-releases/master/client/stable/Outline-Client.exe"),
        types.InlineKeyboardButton("ü•© Chrome (–ë—Ä–∞—É–∑–µ—Ä)", url="https://play.google.com/store/apps/details?id=org.outline.android.client")
    )
    await message.answer("üçô –° –∫–∞–∫–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ –±—É–¥–µ–º –ø–æ–¥–∫–ª—é—á–∞—Ç—å—Å—è?", reply_markup=keyboard)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "üçå –î–æ—Å—Ç—É–ø –∫ VPN" –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∏–Ω–≤–æ–π—Å–∞
@dp.message_handler(lambda message: message.text == 'üçå –î–æ—Å—Ç—É–ø –∫ VPN')
async def server_callback(message: types.Message):
    # –°–æ–∑–¥–∞–π—Ç–µ –∏–Ω–≤–æ–π—Å –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    invoice = types.Invoice(
        title="YourTitle",
        description="YourDescription",
        payload="YourPayload",
        provider_token="381764678:TEST:73561",
        currency="RUB",
        prices=[types.LabeledPrice(label="–†—É–±", amount=9900)]
    )

    await bot.send_invoice(
        message.from_user.id,
        **invoice.to_python()
    )
# –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ PreCheckoutQuery
@dp.pre_checkout_query_handler(lambda query: True)
async def process_pre_checkout_query(pre_checkout_query: types.PreCheckoutQuery):
    await bot.answer_pre_checkout_query(
        pre_checkout_query.id,
        ok=True,
        error_message="–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫, –ø–ª–∞—Ç–µ–∂ –Ω–µ –ø—Ä–æ—à–µ–ª"
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–ª–∞—Ç–µ–∂–∞
@dp.message_handler(content_types=types.ContentType.SUCCESSFUL_PAYMENT)
async def process_successful_payment(message: types.Message):
    # –ü–æ–ª—É—á–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏–∑ SuccessfulPayment
    transaction_id = message.successful_payment.provider_payment_charge_id

    # –ó–∞–ø—Ä–æ—Å –∫ —Å–µ—Ä–≤–µ—Ä—É Outline –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª—é—á–∞
    outline_server_data = {
        "apiUrl": "https://81.19.137.215:55902/Gs9mTulEVDPZmGcrj8dv6w",
        "certSha256": "A786F229BE1C5D083C559D7658DD18BFAA2D00D8946C2251FA1C3BB161027AF8"
    }
    async with httpx.AsyncClient(verify=False) as client:
        url = outline_server_data["apiUrl"] + "/access-keys/"
        response = await client.post(url)

        if response.status_code == 201:
            key_data = response.json()
            print(key_data)
            key_text = key_data.get("accessUrl")
            if key_text:
                await bot.send_message(message.from_user.id,
                                       f"1. –ù–µ —Ç—É–ø–∏\n2. –ù–∞–∂–º–∏ –Ω–∞ –Ω–µ–ø–æ–Ω—è—Ç–Ω—ã–π —Ç–µ–∫—Å—Ç —Å–Ω–∏–∑—É\n3. –í—Å—Ç–∞–≤—å –≤ –∫–ª—é—á –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ\n```{key_text}#VPN_–§—Ä–∞–Ω—Ü–∏—èü•ñ(t.me/ryyad)```\np.s\n–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –º–æ–∂–Ω–æ —Å–∫–∞—á–∞—Ç—å –ø–æ –∫–Ω–æ–ø–∫–µ –≤ –º–µ–Ω—é (üîç –ö–∞–∫ –ø–æ–¥–∫–ª—é—á–∏—Ç—å)",
                                       parse_mode=types.ParseMode.MARKDOWN)
                user_id = message.from_user.id
                update_purchase_date(user_id)

        else:
            await bot.send_message(
                message.from_user.id,
                "–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫. –ü–ª–∞—Ç–µ–∂ –ø—Ä–æ—à–µ–ª, –Ω–æ –∫–ª—é—á –Ω–µ –±—ã–ª –ø–æ–ª—É—á–µ–Ω."
            )

if __name__ == '__main__':
    from aiogram import executor
    executor.start_polling(dp, skip_updates=None)